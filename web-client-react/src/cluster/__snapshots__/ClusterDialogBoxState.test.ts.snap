// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cluster dialog box state block node focus should focus the next member on the search result after pressing down arrow 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node focus should focus the previous member on the search result after pressing up arrow 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node search should list search results for block node 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onPause()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node selection should allow deselecting all nodes 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node selection should allow selecting multiple nodes 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node selection should allow to deselect the start node 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [
      Member {
        "nodeId": "void onPause()",
      },
    ],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state block node selection should deselect the currently focused node on clicking the 'x' button 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state block node selection should select the currently focused node on pressing enter 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Array [
      Member {
        "nodeId": "void onPause()",
      },
    ],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "voi",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;

exports[`Cluster dialog box state focused member functionality should select the first matching member and mark it as focused from the search result 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state focused member functionality should select the first member from the search result when pressing down arrow on the last item 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state focused member functionality should select the last member from the search result when pressing the up arrow on the first item 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state focused member functionality should select the next member when pressing the down arrow 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onPause()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state focused member functionality should select the previous member when pressing the up arrow 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should do a case insensitive search 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onResume()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "resume",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should filter members based on the search term 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "List chrome",
    },
    "searchResult": Array [
      Member {
        "nodeId": "List chrome",
      },
    ],
    "searchTerm": "chr",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should filter members based on the search term but ignore whitespaces 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "List chrome",
    },
    "searchResult": Array [
      Member {
        "nodeId": "List chrome",
      },
    ],
    "searchTerm": "chr",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should not filter members when the search term has < 2 characters 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "c",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should not filter members when the search term is empty 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should not filter members when the search term only contains spaces 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state search start node functionality should not have filtered results for a non-matching search term 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "hello",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state should have an initial state 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state start node selection should deselect the start node 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": null,
  },
}
`;

exports[`Cluster dialog box state start node selection should select the currently focused element as the start node 1`] = `
ClusterDialogBoxState {
  "blockNodeSelectionModel": MultipleSelectionModel {
    "focused": null,
    "searchResult": Array [],
    "searchTerm": "",
    "selected": Array [],
  },
  "members": Array [
    Member {
      "nodeId": "List chrome",
    },
    Member {
      "nodeId": "void onCreate()",
    },
    Member {
      "nodeId": "void onPause()",
    },
    Member {
      "nodeId": "void onResume()",
    },
  ],
  "startNodeSelectionModel": SingleSelectionModel {
    "focused": Member {
      "nodeId": "void onCreate()",
    },
    "searchResult": Array [
      Member {
        "nodeId": "void onCreate()",
      },
      Member {
        "nodeId": "void onPause()",
      },
      Member {
        "nodeId": "void onResume()",
      },
    ],
    "searchTerm": "void",
    "selected": Member {
      "nodeId": "void onCreate()",
    },
  },
}
`;
