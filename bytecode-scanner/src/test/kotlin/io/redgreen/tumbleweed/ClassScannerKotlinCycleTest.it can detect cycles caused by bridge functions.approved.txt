Package: io.redgreen.tumbleweed.web
Class: TumbleweedServer
Fields:
  - org.slf4j.Logger logger
  - io.ktor.server.engine.ApplicationEngine webServer
  - java.util.concurrent.LinkedBlockingQueue structureUpdatesQueue
  - io.redgreen.tumbleweed.filesystem.FileWatcher classFileChangesWatcher
Methods:
  - void <init>()
  - void start(int, io.redgreen.tumbleweed.web.Source)
  - void stop()
  - void installWebSockets(io.ktor.server.application.Application)
  - void setupRoutes(io.ktor.server.application.Application, io.redgreen.tumbleweed.web.Source, int)
  - java.lang.Object serveIndexPage(io.ktor.util.pipeline.PipelineContext, int, kotlin.coroutines.Continuation)
  - java.lang.Object openWsConnectionForStructureUpdates(io.ktor.server.websocket.DefaultWebSocketServerSession, java.util.concurrent.BlockingQueue, io.redgreen.tumbleweed.web.Source, kotlin.coroutines.Continuation)
  - void startWatchingFileForChanges(io.redgreen.tumbleweed.web.Source)
  - java.lang.String getIndexHtml(int)
Reads:
  - void start(int, io.redgreen.tumbleweed.web.Source) -> org.slf4j.Logger logger
  - void startWatchingFileForChanges(io.redgreen.tumbleweed.web.Source) -> org.slf4j.Logger logger
  - void startWatchingFileForChanges(io.redgreen.tumbleweed.web.Source) -> io.redgreen.tumbleweed.filesystem.FileWatcher classFileChangesWatcher
  - void startWatchingFileForChanges(io.redgreen.tumbleweed.web.Source) -> java.util.concurrent.LinkedBlockingQueue structureUpdatesQueue
  - void setupRoutes(io.ktor.server.application.Application, io.redgreen.tumbleweed.web.Source, int) -> java.util.concurrent.LinkedBlockingQueue structureUpdatesQueue
  - void stop() -> org.slf4j.Logger logger
  - void stop() -> io.ktor.server.engine.ApplicationEngine webServer
  - java.lang.Object openWsConnectionForStructureUpdates(io.ktor.server.websocket.DefaultWebSocketServerSession, java.util.concurrent.BlockingQueue, io.redgreen.tumbleweed.web.Source, kotlin.coroutines.Continuation) -> org.slf4j.Logger logger
Writes:
  - void <init>() -> org.slf4j.Logger logger
  - void <init>() -> java.util.concurrent.LinkedBlockingQueue structureUpdatesQueue
  - void <init>() -> io.redgreen.tumbleweed.filesystem.FileWatcher classFileChangesWatcher
  - void start(int, io.redgreen.tumbleweed.web.Source) -> io.ktor.server.engine.ApplicationEngine webServer
Calls:
  - void start(int, io.redgreen.tumbleweed.web.Source) -> void startWatchingFileForChanges(io.redgreen.tumbleweed.web.Source)
  - void start(int, io.redgreen.tumbleweed.web.Source) -> void installWebSockets(io.ktor.server.application.Application)
  - void start(int, io.redgreen.tumbleweed.web.Source) -> void setupRoutes(io.ktor.server.application.Application, io.redgreen.tumbleweed.web.Source, int)
  - void setupRoutes(io.ktor.server.application.Application, io.redgreen.tumbleweed.web.Source, int) -> java.lang.Object openWsConnectionForStructureUpdates(io.ktor.server.websocket.DefaultWebSocketServerSession, java.util.concurrent.BlockingQueue, io.redgreen.tumbleweed.web.Source, kotlin.coroutines.Continuation)
  - void setupRoutes(io.ktor.server.application.Application, io.redgreen.tumbleweed.web.Source, int) -> java.lang.Object serveIndexPage(io.ktor.util.pipeline.PipelineContext, int, kotlin.coroutines.Continuation)
  - java.lang.Object serveIndexPage(io.ktor.util.pipeline.PipelineContext, int, kotlin.coroutines.Continuation) -> java.lang.String getIndexHtml(int)
  - java.lang.Object openWsConnectionForStructureUpdates(io.ktor.server.websocket.DefaultWebSocketServerSession, java.util.concurrent.BlockingQueue, io.redgreen.tumbleweed.web.Source, kotlin.coroutines.Continuation) -> java.lang.Object openWsConnectionForStructureUpdates(io.ktor.server.websocket.DefaultWebSocketServerSession, java.util.concurrent.BlockingQueue, io.redgreen.tumbleweed.web.Source, kotlin.coroutines.Continuation)
